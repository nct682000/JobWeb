# Generated by Django 3.2.5 on 2021-08-09 09:28

import ckeditor.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('sex', models.CharField(choices=[('MALE', 'Nam'), ('FEMALE', 'Nữ'), ('NEUTRAL', 'Giới tính khác')], default='Nam', max_length=20, null=True)),
                ('company_name', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=12, null=True)),
                ('role', models.CharField(choices=[('ADMIN', 'Admin'), ('RECRUITER', 'Nhà tuyển dụng'), ('CANDIDATE', 'Người ứng tuyển')], max_length=20)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/%Y/%m')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Benefit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Career',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('file', models.FileField(null=True, upload_to='uploads/comment/%Y/%m')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('commented', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_recruiter', to=settings.AUTH_USER_MODEL)),
                ('commenter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_candidate', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Province',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Recruitment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('salary_from', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('salary_to', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('form', models.CharField(choices=[('INTERN', 'Thực tập/Sinh viên'), ('GRADUATED', 'Vừa tốt nghiệp'), ('STAFF', 'Nhân viên'), ('LEADER', 'Trưởng nhóm'), ('MANAGER', 'Quản lý'), ('SENIOR_MANAGER', 'Quản lý cấp cao'), ('EXECUTIVES', 'Giám đốc điều hành')], default=None, max_length=20)),
                ('description', ckeditor.fields.RichTextField(blank=True, null=True)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('benefit', models.ManyToManyField(blank=True, null=True, related_name='recruitment_benefit', to='jobs.Benefit')),
                ('career', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recruitment_career', to='jobs.career')),
                ('recruiter', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recruitment_recruiter', to=settings.AUTH_USER_MODEL)),
                ('tag', models.ManyToManyField(blank=True, null=True, related_name='recruitment_tag', to='jobs.Tag')),
            ],
        ),
        migrations.CreateModel(
            name='Rate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', models.IntegerField()),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rate_candidate', to=settings.AUTH_USER_MODEL)),
                ('recruiter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rate_recruiter', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('province', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='location_province', to='jobs.province')),
            ],
        ),
        migrations.CreateModel(
            name='Interaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('LIKE', 'Like'), ('DISLIKE', 'Dislike')], default='Like', max_length=20)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interaction_comment', to='jobs.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interaction_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Apply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('CV', models.FileField(null=True, upload_to='uploads/CV/%Y/%m')),
                ('active', models.BooleanField(default=True)),
                ('candidate', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='apply_candidate', to=settings.AUTH_USER_MODEL)),
                ('recruitment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='apply_recruitment', to='jobs.recruitment')),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_location', to='jobs.location'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('comment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='jobs.comment')),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feedback_comment', to='jobs.comment')),
            ],
            bases=('jobs.comment',),
        ),
    ]
